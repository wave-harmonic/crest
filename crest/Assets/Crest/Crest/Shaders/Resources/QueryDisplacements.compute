// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

#pragma kernel CSMain

// Must match value in script
#define GROUP_SIZE 64

StructuredBuffer<float3> _QueryPositions_MinGridSizes;
RWStructuredBuffer<float3> _ResultDisplacements;

#include "HLSLSupport.cginc"

#include "../OceanGlobals.hlsl"
#include "../OceanInputsDriven.hlsl"
#include "../OceanHelpers.hlsl"

float3 ComputeDisplacement(float2 undispPos, float minSlice, const float baseScale)
{
	uint slice0, slice1;
	float lodAlpha;
	PosToSliceIndices(undispPos, minSlice, baseScale, slice0, slice1, lodAlpha);

	const float3 uv0 = WorldToUV(undispPos, _CrestCascadeData[slice0], slice0);
	const float3 uv1 = WorldToUV(undispPos, _CrestCascadeData[slice1], slice1);

	const float wt_0 = (1. - lodAlpha) * _CrestCascadeData[slice0]._weight;
	const float wt_1 = (1. - wt_0) * _CrestCascadeData[slice1]._weight;

	// Wave displacement
	float3 disp = 
		wt_0 * _LD_TexArray_AnimatedWaves.SampleLevel(LODData_linear_clamp_sampler, uv0, 0).xyz +
		wt_1 * _LD_TexArray_AnimatedWaves.SampleLevel(LODData_linear_clamp_sampler, uv1, 0).xyz;

	// Sea level offset
	disp.y +=
		wt_0 * _LD_TexArray_SeaFloorDepth.SampleLevel(LODData_linear_clamp_sampler, uv0, 0).y +
		wt_1 * _LD_TexArray_SeaFloorDepth.SampleLevel(LODData_linear_clamp_sampler, uv1, 0).y;
	
	return disp;
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float3 data = _QueryPositions_MinGridSizes[id.x];
	const float2 queryPosXZ = data.xy;
	const float minGridSize = data.z;

	const float gridSizeSlice0 = _CrestCascadeData[0]._texelWidth;
	// Displacements should not utilize the last slice which is used for transitioning waves between
	// sampling resolutions
	const float minSlice = clamp(floor(log2(max(minGridSize / gridSizeSlice0, 1.0))), 0.0, _SliceCount - 2.0);
	const float baseScale = _CrestCascadeData[0]._scale;

	// Perform iteration to invert the displacement vector field - find position that displaces to query position,
	// and return displacement at that point.

	float2 undispPos = queryPosXZ;
	for (int i = 0; i < 4; i++)
	{
		float3 displacement = ComputeDisplacement(undispPos, minSlice, baseScale);

		float2 error = (undispPos + displacement.xz) - queryPosXZ;

		undispPos -= error;
	}

	_ResultDisplacements[id.x] = ComputeDisplacement(undispPos, minSlice, baseScale);
}
