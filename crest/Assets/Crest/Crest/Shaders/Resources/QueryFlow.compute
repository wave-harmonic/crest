// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

#pragma kernel CSMain

// Must match value in script
#define GROUP_SIZE 64

StructuredBuffer<float3> _QueryPositions_MinGridSizes;
RWStructuredBuffer<float3> _ResultFlows;

#include "HLSLSupport.cginc"

#include "../OceanGlobals.hlsl"
#include "../OceanInputsDriven.hlsl"
#include "../OceanHelpers.hlsl"

float3 ComputeFlow(float2 undispPos, float minSlice, const float baseScale)
{
	uint slice0, slice1;
	float lodAlpha;
	PosToSliceIndices(undispPos, minSlice, baseScale, slice0, slice1, lodAlpha);

	const float3 uv0 = WorldToUV(undispPos, _CrestCascadeData[slice0], slice0);
	const float3 uv1 = WorldToUV(undispPos, _CrestCascadeData[slice1], slice1);

	const float wt_0 = (1. - lodAlpha) * _CrestCascadeData[slice0]._weight;
	const float wt_1 = (1. - wt_0) * _CrestCascadeData[slice1]._weight;

	float2 result =
		wt_0 * _LD_TexArray_Flow.SampleLevel(LODData_linear_clamp_sampler, uv0, 0).xy +
		wt_1 * _LD_TexArray_Flow.SampleLevel(LODData_linear_clamp_sampler, uv1, 0).xy;

	// Unfortunately we don't support float2 vs float3s yet, on the C# side
	return float3(result.x, 0.0, result.y);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float3 data = _QueryPositions_MinGridSizes[id.x];
	const float2 queryPosXZ = data.xy;
	const float minGridSize = data.z;

	const float gridSizeSlice0 = _CrestCascadeData[0]._texelWidth;
	// While it would probably be ok to use the last slice, we avoid using it to be consistent with displacements.
	const float minSlice = clamp(floor(log2(max(minGridSize / gridSizeSlice0, 1.0))), 0.0, _SliceCount - 2.0);
	const float baseScale = _CrestCascadeData[0]._scale;

	_ResultFlows[id.x] = ComputeFlow(queryPosXZ, minSlice, baseScale);
}
