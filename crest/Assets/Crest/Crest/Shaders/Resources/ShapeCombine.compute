// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

// Compute shader to perform combine of displacements. Reads and writes to texture array which saves
// needing to do ping pong of render targets. Unfortunately reading/writing float4s is not supported
// on pre-DX11.3 hardware (aka typed UAV loads), so this path is not the default, for now..

#pragma kernel ShapeCombine
#pragma kernel ShapeCombine_DISABLE_COMBINE _DISABLE_COMBINE
#pragma kernel ShapeCombine_FLOW_ON _FLOW_ON
#pragma kernel ShapeCombine_FLOW_ON_DISABLE_COMBINE _FLOW_ON _DISABLE_COMBINE
#pragma kernel ShapeCombine_DYNAMIC_WAVE_SIM_ON _DYNAMIC_WAVE_SIM_ON
#pragma kernel ShapeCombine_DYNAMIC_WAVE_SIM_ON_DISABLE_COMBINE _DYNAMIC_WAVE_SIM_ON _DISABLE_COMBINE
#pragma kernel ShapeCombine_FLOW_ON_DYNAMIC_WAVE_SIM_ON _FLOW_ON _DYNAMIC_WAVE_SIM_ON
#pragma kernel ShapeCombine_FLOW_ON_DYNAMIC_WAVE_SIM_ON_DISABLE_COMBINE _FLOW_ON _DYNAMIC_WAVE_SIM_ON _DISABLE_COMBINE

#include "HLSLSupport.cginc"

#include "../OceanConstants.hlsl"
#include "../OceanGlobals.hlsl"
#include "../OceanInputsDriven.hlsl"
#include "../OceanHelpers.hlsl"

float _HorizDisplace;
float _DisplaceClamp;

RWTexture2DArray<half4> _LD_TexArray_AnimatedWaves_Compute;

void Flow(in const CascadeParams cascadeData, out float2 offsets, out float2 weights)
{
	const float period = max(3.0 * _CrestCascadeData[_LD_SliceIndex]._texelWidth, 1.0);
	const float half_period = period / 2.0;
	offsets = fmod(float2(_CrestTime, _CrestTime + half_period), period);
	weights.x = offsets.x / half_period;
	if (weights.x > 1.0) weights.x = 2.0 - weights.x;
	weights.y = 1.0 - weights.x;
}

void SampleDisplacementsCompute(
	in RWTexture2DArray<half4> i_dispSampler,
	in float i_width, in float i_height, in float3 i_uv_slice,
	in float i_wt, inout float3 io_worldPos
) {
	// NOTE: We have to roll our own bilinear filter in Compute shaders when
	// reading from a RWTexture. The documentation below explains how SRV
	// and UAV mappings of the same texture cannot exist at the same time.
	// https://docs.microsoft.com/en-us/windows/desktop/direct3dhlsl/sm5-object-rwtexture2d

	// Convert from UV to coordinates
	const float2 pixelCoord = i_uv_slice.xy * float2(i_width, i_height);

	// Make relative to pixel centers
	float2 pixelCoordCenters = pixelCoord - 0.5;

	// Clamp from below and above (desired?)
	pixelCoordCenters = clamp(pixelCoordCenters, 0.0, float2(i_width, i_height) - 1.0);

	// Compute integral and fractional parts
	const uint2 pixelCoordCentersBotLeft = floor(pixelCoordCenters);
	const uint sliceIndex = i_uv_slice.z;
	const float2 pixelCoordCentersFrac = frac(pixelCoordCenters);

	const half4 dataBotLeft = i_dispSampler[uint3(pixelCoordCentersBotLeft, sliceIndex)];
	const half4 dataBotRight = i_dispSampler[uint3(pixelCoordCentersBotLeft + uint2(1, 0), sliceIndex)];
	const half4 dataTopLeft = i_dispSampler[uint3(pixelCoordCentersBotLeft + uint2(0, 1), sliceIndex)];
	const half4 dataTopRight = i_dispSampler[uint3(pixelCoordCentersBotLeft + uint2(1, 1), sliceIndex)];

	const float4 dataLerped = lerp(
		lerp(dataBotLeft, dataBotRight, pixelCoordCentersFrac.x),
		lerp(dataTopLeft, dataTopRight, pixelCoordCentersFrac.x),
		pixelCoordCentersFrac.y
	);

	io_worldPos += i_wt * dataLerped.xyz;
}

void ShapeCombineBase(uint3 id)
{
	float width, height;
	{
		float dummy;
		_LD_TexArray_AnimatedWaves_Compute.GetDimensions(width, height, dummy);
	}
	const float2 input_uv = IDtoUV(id.xy, width, height);
	const CascadeParams cascadeData0 = _CrestCascadeData[_LD_SliceIndex];
	const CascadeParams cascadeData1 = _CrestCascadeData[_LD_SliceIndex + 1];

	const float2 worldPosXZ = UVToWorld(input_uv, _LD_SliceIndex, cascadeData0);

	// sample the shape 1 texture at this world pos
	const float3 uv_nextLod = WorldToUV(worldPosXZ, cascadeData1, _LD_SliceIndex + 1);

	float3 uv_thisLod = float3(input_uv, _LD_SliceIndex);

	float3 result = 0.0;
	half variance = 0.0;

	// Sample in waves for this cascade.
#if _FLOW_ON
	half2 flow = 0.0;
	SampleFlow(_LD_TexArray_Flow, uv_thisLod, 1.0, flow);

	float2 offsets, weights;
	Flow(cascadeData0, offsets, weights);

	const float3 uv_thisLod_flow_0 = WorldToUV(worldPosXZ - offsets[0] * flow, cascadeData0, _LD_SliceIndex);
	const float3 uv_thisLod_flow_1 = WorldToUV(worldPosXZ - offsets[1] * flow, cascadeData0, _LD_SliceIndex);
	SampleDisplacements(_LD_TexArray_WaveBuffer, uv_thisLod_flow_0, weights[0], result, variance );
	SampleDisplacements(_LD_TexArray_WaveBuffer, uv_thisLod_flow_1, weights[1], result, variance );
#else
	SampleDisplacements(_LD_TexArray_WaveBuffer, uv_thisLod, 1.0, result, variance);
#endif // _FLOW_ON

#if !_DISABLE_COMBINE
	// Waves to combine down from the next lod up the chain.
	// Do not combine variance. Variance is already cumulative - from low cascades up.
	SampleDisplacementsCompute(_LD_TexArray_AnimatedWaves_Compute, width, height, uv_nextLod, 1.0, result);
#endif

#if _DYNAMIC_WAVE_SIM_ON
	{
		// convert dynamic wave sim to displacements

		half waveSimY = SampleLod(_LD_TexArray_DynamicWaves, uv_thisLod).x;
		result.y += waveSimY;

		const float2 invRes = float2(cascadeData0._oneOverTextureRes, 0.0);
		const half waveSimY_px = SampleLod(_LD_TexArray_DynamicWaves, uv_thisLod + float3(invRes.xy, 0)).x;
		const half waveSimY_nx = SampleLod(_LD_TexArray_DynamicWaves, uv_thisLod - float3(invRes.xy, 0)).x;
		const half waveSimY_pz = SampleLod(_LD_TexArray_DynamicWaves, uv_thisLod + float3(invRes.yx, 0)).x;
		const half waveSimY_nz = SampleLod(_LD_TexArray_DynamicWaves, uv_thisLod - float3(invRes.yx, 0)).x;
		// compute displacement from gradient of water surface - discussed in issue #18 and then in issue #47

		// For gerstner waves, horiz displacement is proportional to derivative of vertical displacement multiplied by the wavelength
		const float wavelength_mid = 2.0 * cascadeData0._texelWidth * 1.5;
		const float wavevector = 2.0 * 3.14159 / wavelength_mid;
		const float2 dydx = (float2(waveSimY_px, waveSimY_pz) - float2(waveSimY_nx, waveSimY_nz)) / (2.0 * cascadeData0._texelWidth);
		float2 dispXZ = _HorizDisplace * dydx / wavevector;

		const float maxDisp = cascadeData0._texelWidth * _DisplaceClamp;
		dispXZ = clamp(dispXZ, -maxDisp, maxDisp);

		result.xz += dispXZ;
	}
#endif // _DYNAMIC_WAVE_SIM_ON

	_LD_TexArray_AnimatedWaves_Compute[uint3(id.xy, _LD_SliceIndex)] = half4(result, variance);
}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine_DISABLE_COMBINE(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine_FLOW_ON(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine_FLOW_ON_DISABLE_COMBINE(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine_DYNAMIC_WAVE_SIM_ON(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine_DYNAMIC_WAVE_SIM_ON_DISABLE_COMBINE(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine_FLOW_ON_DYNAMIC_WAVE_SIM_ON(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)] void ShapeCombine_FLOW_ON_DYNAMIC_WAVE_SIM_ON_DISABLE_COMBINE(uint3 id : SV_DispatchThreadID) { ShapeCombineBase(id); }
