// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

// Solves 2D wave equation

#pragma kernel UpdateDynWaves

#include "HLSLSupport.cginc"

#include "../OceanConstants.hlsl"
#include "../OceanGlobals.hlsl"
#include "../OceanInputsDriven.hlsl"
#include "../OceanHelpers.hlsl"

RWTexture2DArray<float2> _LD_TexArray_Target;

CBUFFER_START(CrestPerMaterial)
float _Damping;
float _Gravity;
float _SimDeltaTime;
float _LODChange;
float _CourantNumber;
float _AttenuationInShallows;
CBUFFER_END

float ComputeWaveSpeed(float wavelength, float g)
{
	// wave speed of deep sea ocean waves: https://en.wikipedia.org/wiki/Wind_wave
	// https://en.wikipedia.org/wiki/Dispersion_(water_waves)#Wave_propagation_and_dispersion
	//float g = 9.81; float k = 2. * 3.141593 / wavelength; float cp = sqrt(g / k); return cp;
	const float one_over_2pi = 0.15915494;
	return sqrt(wavelength*g*one_over_2pi);
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void UpdateDynWaves(uint3 id : SV_DispatchThreadID)
{
	const float sliceIndex = id.z;
	float width; float height; float depth;
	{
		_LD_TexArray_DynamicWaves_Source.GetDimensions(width, height, depth);
	}

	// Slice to sample previous frames data from. LOD change takes into account shifting of the cascades in scale.
	const float sliceIndexSource = id.z + _LODChange;

	// Off either end of the cascade - not useful to sample anything from previous frame. Always initialise
	// with 0 values.
	if (sliceIndexSource < 0.0 || sliceIndexSource >= depth - 1.0)
	{
		_LD_TexArray_Target[id] = (float2)0;
		return;
	}

	const float2 input_uv = IDtoUV(id.xy, width, height);
	const CascadeParams cascadeData = _CrestCascadeData[sliceIndex];
	const float2 worldPosXZ = UVToWorld(input_uv, sliceIndex, cascadeData);
	const float gridSize = cascadeData._texelWidth;

	// Min wavelength for this scale
	const float wavelength = 2.0 * gridSize;
	// could make velocity depend on waves
	//float h = max(waterSignedDepth + ft, 0.);
	float c = ComputeWaveSpeed(wavelength, _Gravity);

	const float dt = _SimDeltaTime;

	// Clamp based on my main man Courant
	c = min( c, _CourantNumber * gridSize / dt );

	const float3 uv_slice = float3(input_uv, sliceIndex);

	const float2 terrainHeight_seaLevelOffset = _LD_TexArray_SeaFloorDepth.SampleLevel(LODData_linear_clamp_sampler, uv_slice, 0.0).xy;
	const float waterDepth = _OceanCenterPosWorld.y - terrainHeight_seaLevelOffset.x + terrainHeight_seaLevelOffset.y;

	// Wave reflections off geometry.
	if (waterDepth <= 0.0)
	{
		_LD_TexArray_Target[id] = float2(0.0, 0.0);
		return;
	}

	const half2 velocity = SampleLod(_LD_TexArray_Flow, uv_slice).xy;
	const float2 worldPosXZFlowed = worldPosXZ - dt * velocity;
	const float3 uv_source = WorldToUV(worldPosXZFlowed, _CrestCascadeDataSource[sliceIndexSource], sliceIndexSource);

	// weighting for source position - weight 0 for off texture accesses to stop streaky artifacts
	float2 distToEdge = min(uv_source.xy, 1.0 - uv_source.xy);
	// soft, wide feather at boundary to balance reflections vs streaking under motion
	const float edgeFeather = 0.1;
	float weightEdge = saturate(min(distToEdge.x, distToEdge.y) / edgeFeather);
	weightEdge = lerp(0.95, 1.0, weightEdge);

	// compute axes of laplacian kernel - rotated every frame
	const float e = _CrestCascadeDataSource[sliceIndexSource]._oneOverTextureRes; // assumes square RT
	const float3 X = float3(1.0, 0.0, 0.0);
	const float3 Y = float3(-X.y, X.x, 0.0);

	// no border wrap mode for RTs in unity it seems,
	// so make any off-array reads 0 manually
	const bool insideTarget = sliceIndexSource <= depth && sliceIndexSource >= 0;

	float fxm, fym, fxp, fyp; float2 ft_v;
	ft_v = fxm = fym = fxp = fyp = 0.0;

	if (insideTarget)
	{
		fxm = SampleLod(_LD_TexArray_DynamicWaves_Source, uv_source - e * X).x; // x minus
		fym = SampleLod(_LD_TexArray_DynamicWaves_Source, uv_source - e * Y).x; // y minus
		fxp = SampleLod(_LD_TexArray_DynamicWaves_Source, uv_source + e * X).x; // x plus
		fyp = SampleLod(_LD_TexArray_DynamicWaves_Source, uv_source + e * Y).x; // y plus
		ft_v = SampleLod(_LD_TexArray_DynamicWaves_Source, uv_source).xy;
	}

	// wave propagation

	// t - current value before update
	const float ft = ft_v.x;
	const float vt = ft_v.y;

	// wave equation
	float coeff = dt * c * c / (gridSize * gridSize);
	float vtp = vt + coeff * (fxm + fxp + fym + fyp - 4.0 * ft);

	// damping. works ok at low dts, doesnt damp well at high dts which counter intuitively leads to instabilities, i think.
	vtp *= 1.0 - min(1.0, _Damping * dt);

	// dampen towards boundaries smoothly to eliminate reflections and streaking
	vtp *= weightEdge;

	// integrate velocity onto position
	float ftp = ft + dt * vtp;
	ftp *= weightEdge;

	if (_AttenuationInShallows > 0.0)
	{
		// attenuate waves based on ocean depth. if depth is greater than 0.5*wavelength, water is considered Deep and wave is
		// unaffected. if depth is less than this, wave velocity decreases. waves will then bunch up and grow in amplitude and
		// eventually break. i model "Deep" water, but then simply ramp down waves in non-deep water with a linear multiplier.
		// http://hyperphysics.phy-astr.gsu.edu/hbase/Waves/watwav2.html
		// http://hyperphysics.phy-astr.gsu.edu/hbase/watwav.html#c1
		const float depthMul = 1.0 - (1.0 - saturate(2.0 * waterDepth / wavelength)) * dt * 2.0;
		ftp *= _AttenuationInShallows * depthMul + (1.0 - _AttenuationInShallows);
	}

	_LD_TexArray_Target[id] = float2(ftp, vtp);
}
