// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

#pragma kernel UpdateFoam

#include "HLSLSupport.cginc"

#include "../OceanConstants.hlsl"
#include "../OceanGlobals.hlsl"
#include "../OceanInputsDriven.hlsl"
#include "../OceanHelpers.hlsl"

RWTexture2DArray<float> _LD_TexArray_Target;

CBUFFER_START(CrestPerMaterial)
float _FoamFadeRate;
float _WaveFoamStrength;
float _WaveFoamCoverage;
float _ShorelineFoamMaxDepth;
float _ShorelineFoamStrength;
float _SimDeltaTime;
float _SimDeltaTimePrev;
float _LODChange;
bool _NeedsPrewarming;
CBUFFER_END

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void UpdateFoam(uint3 id : SV_DispatchThreadID)
{
	// lod data 1 is current frame, compute world pos from quad uv
	const float sliceIndex = id.z;
	float width; float height; float depth;
	{
		_LD_TexArray_Foam_Source.GetDimensions(width, height, depth);
	}
	// Slice to sample previous frames data from. LOD change takes into account shifting of the cascades in scale.
	const float sliceIndexSource = clamp(id.z + _LODChange, 0.0, depth - 1.0);

	const float2 input_uv = IDtoUV(id.xy, width, height);
	const CascadeParams cascadeData = _CrestCascadeData[sliceIndex];
	const float2 worldPosXZ = UVToWorld(input_uv, sliceIndex, cascadeData);
	const float3 uv_slice = float3(input_uv, id.z);
	half foam = 0.0;

	// Sample from previous frame.
	{
		const half2 velocity = _LD_TexArray_Flow.SampleLevel(LODData_linear_clamp_sampler, uv_slice, 0).xy;
		const float2 worldPosXZ_flowed = worldPosXZ - _SimDeltaTime * velocity;

		const half r_max = 0.5 - _CrestCascadeDataSource[sliceIndexSource]._oneOverTextureRes;

		// Try to sample the source slice, if it the sample position lies within its footprint
		const float3 uv_slice_source = WorldToUV(worldPosXZ_flowed, _CrestCascadeDataSource[sliceIndexSource], sliceIndexSource);
		const half2 r = abs(uv_slice_source.xy - 0.5);

		if (max(r.x, r.y) <= r_max)
		{
			foam = _LD_TexArray_Foam_Source.SampleLevel(LODData_linear_clamp_sampler, uv_slice_source, 0.0).x;
		}
		else if (sliceIndexSource + 1.0 < depth)
		{
			// Sample lies outside this cascade. Try to use the next cascade in the chain - better to get something rather lower res
			// than nothing.
			const float3 uv_slice_source_nextlod = WorldToUV(worldPosXZ_flowed, _CrestCascadeDataSource[sliceIndexSource + 1], sliceIndexSource + 1);
			const half2 r2 = abs(uv_slice_source_nextlod.xy - 0.5);
			if (max(r2.x, r2.y) <= r_max)
			{
				foam = _LD_TexArray_Foam_Source.SampleLevel(LODData_linear_clamp_sampler, uv_slice_source_nextlod, 0.0).x;
			}
		}
	}

	// fade
	foam *= max(0.0, 1.0 - _FoamFadeRate * _SimDeltaTime);

	// Prewarm wave foam. 1.0 / _FoamFadeRate perfectly matches a paused ocean in edit mode, but this is an unnatural
	// accumulation of foam and causes overshoots when _WaveFoamStrength is less than 1.0.
	float simDeltaTime = _NeedsPrewarming ? max(_SimDeltaTime, min(1.0, _WaveFoamStrength - 1.0) / _FoamFadeRate) : _SimDeltaTime;

	// Sample displacement texture and generate foam from it
	const float3 dd = float3(cascadeData._oneOverTextureRes, 0.0, cascadeData._texelWidth);
	half4 data = SampleLod( _LD_TexArray_AnimatedWaves, uv_slice );
	half3 s = data.xyz;
	float foamBase = data.w;
	half3 sx = SampleLodLevel(_LD_TexArray_AnimatedWaves, uv_slice + float3(dd.xy, 0.0), dd.y).xyz;
	half3 sz = SampleLodLevel(_LD_TexArray_AnimatedWaves, uv_slice + float3(dd.yx, 0.0), dd.y).xyz;
	float3 disp = s.xyz;
	float3 disp_x = dd.zyy + sx.xyz;
	float3 disp_z = dd.yyz + sz.xyz;
	// The determinant of the displacement Jacobian is a good measure for turbulence:
	// > 1: Stretch
	// < 1: Squash
	// < 0: Overlap
	const float2x2 jacobian = (float4(disp_x.xz, disp_z.xz) - disp.xzxz) / cascadeData._texelWidth;
	// Determinant is < 1 for pinched, < 0 for overlap/inversion
	const float det = determinant( jacobian );
	foam += 5.0 * simDeltaTime * _WaveFoamStrength * saturate( _WaveFoamCoverage - det + foamBase * 0.7 );

	// Prewarm shoreline foam. 1.0 / _FoamFadeRate perfectly matches a paused ocean in edit mode which is fine for
	// shoreline foam.
	simDeltaTime = _NeedsPrewarming ? (1.0 / _FoamFadeRate) : _SimDeltaTime;

	// Add foam in shallow water. use the displaced position to ensure we add foam where world objects are.
	const float3 uv_slice_displaced = WorldToUV(worldPosXZ + disp.xz, cascadeData, sliceIndex);
	const half2 terrainHeight_seaLevelOffset = _LD_TexArray_SeaFloorDepth.SampleLevel(LODData_linear_clamp_sampler, uv_slice_displaced, 0.0).xy;
	const half signedOceanDepth = _OceanCenterPosWorld.y - terrainHeight_seaLevelOffset.x + terrainHeight_seaLevelOffset.y + disp.y;
	foam += _ShorelineFoamStrength * simDeltaTime * saturate(1.0 - signedOceanDepth / _ShorelineFoamMaxDepth);

	_LD_TexArray_Target[id] = saturate(foam);
}
